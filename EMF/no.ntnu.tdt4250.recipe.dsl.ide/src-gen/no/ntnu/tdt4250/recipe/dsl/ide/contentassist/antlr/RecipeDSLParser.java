/*
 * generated by Xtext 2.36.0
 */
package no.ntnu.tdt4250.recipe.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import no.ntnu.tdt4250.recipe.dsl.ide.contentassist.antlr.internal.InternalRecipeDSLParser;
import no.ntnu.tdt4250.recipe.dsl.services.RecipeDSLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RecipeDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RecipeDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RecipeDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getVitaminAccess().getAlternatives(), "rule__Vitamin__Alternatives");
			builder.put(grammarAccess.getPageAccess().getGroup(), "rule__Page__Group__0");
			builder.put(grammarAccess.getInstructionsAccess().getGroup(), "rule__Instructions__Group__0");
			builder.put(grammarAccess.getIngredientsAccess().getGroup(), "rule__Ingredients__Group__0");
			builder.put(grammarAccess.getIngredientsAccess().getGroup_3_0(), "rule__Ingredients__Group_3_0__0");
			builder.put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
			builder.put(grammarAccess.getNutrientsAccess().getGroup(), "rule__Nutrients__Group__0");
			builder.put(grammarAccess.getNutrientsAccess().getGroup_3_0(), "rule__Nutrients__Group_3_0__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getUnitOfMeasureAccess().getGroup(), "rule__UnitOfMeasure__Group__0");
			builder.put(grammarAccess.getBasicInformationAccess().getGroup(), "rule__BasicInformation__Group__0");
			builder.put(grammarAccess.getTitleAccess().getGroup(), "rule__Title__Group__0");
			builder.put(grammarAccess.getImageAccess().getGroup(), "rule__Image__Group__0");
			builder.put(grammarAccess.getPercentageAmountToggleAccess().getGroup(), "rule__PercentageAmountToggle__Group__0");
			builder.put(grammarAccess.getVitaminsAccess().getGroup(), "rule__Vitamins__Group__0");
			builder.put(grammarAccess.getVitaminsAccess().getGroup_6(), "rule__Vitamins__Group_6__0");
			builder.put(grammarAccess.getMacronutrientsAccess().getGroup(), "rule__Macronutrients__Group__0");
			builder.put(grammarAccess.getPageAccess().getInstructionsAssignment_2_0(), "rule__Page__InstructionsAssignment_2_0");
			builder.put(grammarAccess.getPageAccess().getIngredientsAssignment_2_1(), "rule__Page__IngredientsAssignment_2_1");
			builder.put(grammarAccess.getPageAccess().getHeaderAssignment_2_2(), "rule__Page__HeaderAssignment_2_2");
			builder.put(grammarAccess.getPageAccess().getNutrientsAssignment_2_3(), "rule__Page__NutrientsAssignment_2_3");
			builder.put(grammarAccess.getInstructionsAccess().getOrderNumberAssignment_4(), "rule__Instructions__OrderNumberAssignment_4");
			builder.put(grammarAccess.getIngredientsAccess().getOrderNumberAssignment_3_0_1(), "rule__Ingredients__OrderNumberAssignment_3_0_1");
			builder.put(grammarAccess.getIngredientsAccess().getUnittoggleAssignment_3_1(), "rule__Ingredients__UnittoggleAssignment_3_1");
			builder.put(grammarAccess.getHeaderAccess().getBasicinformationAssignment_3_0(), "rule__Header__BasicinformationAssignment_3_0");
			builder.put(grammarAccess.getHeaderAccess().getRecipetitleAssignment_3_1(), "rule__Header__RecipetitleAssignment_3_1");
			builder.put(grammarAccess.getHeaderAccess().getImageAssignment_3_2(), "rule__Header__ImageAssignment_3_2");
			builder.put(grammarAccess.getNutrientsAccess().getOrderNumberAssignment_3_0_1(), "rule__Nutrients__OrderNumberAssignment_3_0_1");
			builder.put(grammarAccess.getNutrientsAccess().getPercentagetoggleAssignment_3_1(), "rule__Nutrients__PercentagetoggleAssignment_3_1");
			builder.put(grammarAccess.getNutrientsAccess().getVitaminsAssignment_3_2(), "rule__Nutrients__VitaminsAssignment_3_2");
			builder.put(grammarAccess.getNutrientsAccess().getMacronutrientsAssignment_3_3(), "rule__Nutrients__MacronutrientsAssignment_3_3");
			builder.put(grammarAccess.getVitaminsAccess().getVitaminAssignment_5(), "rule__Vitamins__VitaminAssignment_5");
			builder.put(grammarAccess.getVitaminsAccess().getVitaminAssignment_6_1(), "rule__Vitamins__VitaminAssignment_6_1");
			builder.put(grammarAccess.getPageAccess().getUnorderedGroup_2(), "rule__Page__UnorderedGroup_2");
			builder.put(grammarAccess.getIngredientsAccess().getUnorderedGroup_3(), "rule__Ingredients__UnorderedGroup_3");
			builder.put(grammarAccess.getHeaderAccess().getUnorderedGroup_3(), "rule__Header__UnorderedGroup_3");
			builder.put(grammarAccess.getNutrientsAccess().getUnorderedGroup_3(), "rule__Nutrients__UnorderedGroup_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RecipeDSLGrammarAccess grammarAccess;

	@Override
	protected InternalRecipeDSLParser createParser() {
		InternalRecipeDSLParser result = new InternalRecipeDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RecipeDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RecipeDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
