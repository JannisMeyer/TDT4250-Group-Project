/*
 * generated by Xtext 2.36.0
 */
package no.ntnu.tdt4250.recipe.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import no.ntnu.tdt4250.recipe.dsl.ide.contentassist.antlr.internal.InternalRecipeDSLParser;
import no.ntnu.tdt4250.recipe.dsl.services.RecipeDSLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RecipeDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RecipeDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RecipeDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getVitaminAccess().getAlternatives(), "rule__Vitamin__Alternatives");
			builder.put(grammarAccess.getPageAccess().getGroup(), "rule__Page__Group__0");
			builder.put(grammarAccess.getPageAccess().getGroup_9(), "rule__Page__Group_9__0");
			builder.put(grammarAccess.getInstructionsAccess().getGroup(), "rule__Instructions__Group__0");
			builder.put(grammarAccess.getIngredientsAccess().getGroup(), "rule__Ingredients__Group__0");
			builder.put(grammarAccess.getIngredientsAccess().getGroup_4(), "rule__Ingredients__Group_4__0");
			builder.put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
			builder.put(grammarAccess.getHeaderAccess().getGroup_6(), "rule__Header__Group_6__0");
			builder.put(grammarAccess.getNutrientsAccess().getGroup(), "rule__Nutrients__Group__0");
			builder.put(grammarAccess.getNutrientsAccess().getGroup_4(), "rule__Nutrients__Group_4__0");
			builder.put(grammarAccess.getNutrientsAccess().getGroup_5(), "rule__Nutrients__Group_5__0");
			builder.put(grammarAccess.getNutrientsAccess().getGroup_6(), "rule__Nutrients__Group_6__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getUnitOfMeasureAccess().getGroup(), "rule__UnitOfMeasure__Group__0");
			builder.put(grammarAccess.getBasicInformationAccess().getGroup(), "rule__BasicInformation__Group__0");
			builder.put(grammarAccess.getTitleAccess().getGroup(), "rule__Title__Group__0");
			builder.put(grammarAccess.getImageAccess().getGroup(), "rule__Image__Group__0");
			builder.put(grammarAccess.getPercentageAmountToggleAccess().getGroup(), "rule__PercentageAmountToggle__Group__0");
			builder.put(grammarAccess.getVitaminsAccess().getGroup(), "rule__Vitamins__Group__0");
			builder.put(grammarAccess.getVitaminsAccess().getGroup_5(), "rule__Vitamins__Group_5__0");
			builder.put(grammarAccess.getMacronutrientsAccess().getGroup(), "rule__Macronutrients__Group__0");
			builder.put(grammarAccess.getPageAccess().getNameAssignment_1(), "rule__Page__NameAssignment_1");
			builder.put(grammarAccess.getPageAccess().getInstructionsAssignment_4(), "rule__Page__InstructionsAssignment_4");
			builder.put(grammarAccess.getPageAccess().getIngredientsAssignment_6(), "rule__Page__IngredientsAssignment_6");
			builder.put(grammarAccess.getPageAccess().getHeaderAssignment_8(), "rule__Page__HeaderAssignment_8");
			builder.put(grammarAccess.getPageAccess().getNutrientsAssignment_9_1(), "rule__Page__NutrientsAssignment_9_1");
			builder.put(grammarAccess.getInstructionsAccess().getOrderNumberAssignment_3(), "rule__Instructions__OrderNumberAssignment_3");
			builder.put(grammarAccess.getIngredientsAccess().getOrderNumberAssignment_3(), "rule__Ingredients__OrderNumberAssignment_3");
			builder.put(grammarAccess.getIngredientsAccess().getUnittoggleAssignment_4_1(), "rule__Ingredients__UnittoggleAssignment_4_1");
			builder.put(grammarAccess.getHeaderAccess().getBasicinformationAssignment_3(), "rule__Header__BasicinformationAssignment_3");
			builder.put(grammarAccess.getHeaderAccess().getRecipetitleAssignment_5(), "rule__Header__RecipetitleAssignment_5");
			builder.put(grammarAccess.getHeaderAccess().getImageAssignment_6_1(), "rule__Header__ImageAssignment_6_1");
			builder.put(grammarAccess.getNutrientsAccess().getOrderNumberAssignment_3(), "rule__Nutrients__OrderNumberAssignment_3");
			builder.put(grammarAccess.getNutrientsAccess().getPercentagetoggleAssignment_4_1(), "rule__Nutrients__PercentagetoggleAssignment_4_1");
			builder.put(grammarAccess.getNutrientsAccess().getVitaminsAssignment_5_1(), "rule__Nutrients__VitaminsAssignment_5_1");
			builder.put(grammarAccess.getNutrientsAccess().getMacronutrientsAssignment_6_1(), "rule__Nutrients__MacronutrientsAssignment_6_1");
			builder.put(grammarAccess.getVitaminsAccess().getVitaminAssignment_4(), "rule__Vitamins__VitaminAssignment_4");
			builder.put(grammarAccess.getVitaminsAccess().getVitaminAssignment_5_1(), "rule__Vitamins__VitaminAssignment_5_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RecipeDSLGrammarAccess grammarAccess;

	@Override
	protected InternalRecipeDSLParser createParser() {
		InternalRecipeDSLParser result = new InternalRecipeDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RecipeDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RecipeDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
