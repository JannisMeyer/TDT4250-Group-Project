/*
 * generated by Xtext 2.36.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import no.ntnu.tdt4250.recipe.BasicInformation;
import no.ntnu.tdt4250.recipe.Header;
import no.ntnu.tdt4250.recipe.Image;
import no.ntnu.tdt4250.recipe.Ingredients;
import no.ntnu.tdt4250.recipe.Instructions;
import no.ntnu.tdt4250.recipe.Macronutrients;
import no.ntnu.tdt4250.recipe.Nutrients;
import no.ntnu.tdt4250.recipe.Page;
import no.ntnu.tdt4250.recipe.PercentageAmountToggle;
import no.ntnu.tdt4250.recipe.RecipePackage;
import no.ntnu.tdt4250.recipe.Title;
import no.ntnu.tdt4250.recipe.UnitOfMeasure;
import no.ntnu.tdt4250.recipe.Vitamins;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.RecipeGrammarAccess;

@SuppressWarnings("all")
public class RecipeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RecipeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RecipePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RecipePackage.BASIC_INFORMATION:
				sequence_BasicInformation(context, (BasicInformation) semanticObject); 
				return; 
			case RecipePackage.HEADER:
				sequence_Header(context, (Header) semanticObject); 
				return; 
			case RecipePackage.IMAGE:
				sequence_Image(context, (Image) semanticObject); 
				return; 
			case RecipePackage.INGREDIENTS:
				sequence_Ingredients(context, (Ingredients) semanticObject); 
				return; 
			case RecipePackage.INSTRUCTIONS:
				sequence_Instructions(context, (Instructions) semanticObject); 
				return; 
			case RecipePackage.MACRONUTRIENTS:
				sequence_Macronutrients(context, (Macronutrients) semanticObject); 
				return; 
			case RecipePackage.NUTRIENTS:
				sequence_Nutrients(context, (Nutrients) semanticObject); 
				return; 
			case RecipePackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case RecipePackage.PERCENTAGE_AMOUNT_TOGGLE:
				sequence_PercentageAmountToggle(context, (PercentageAmountToggle) semanticObject); 
				return; 
			case RecipePackage.TITLE:
				sequence_Title(context, (Title) semanticObject); 
				return; 
			case RecipePackage.UNIT_OF_MEASURE:
				sequence_UnitOfMeasure(context, (UnitOfMeasure) semanticObject); 
				return; 
			case RecipePackage.VITAMINS:
				sequence_Vitamins(context, (Vitamins) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     BasicInformation returns BasicInformation
	 *
	 * Constraint:
	 *     {BasicInformation}
	 * </pre>
	 */
	protected void sequence_BasicInformation(ISerializationContext context, BasicInformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Header returns Header
	 *
	 * Constraint:
	 *     (basicinformation=BasicInformation recipetitle=Title image=Image?)
	 * </pre>
	 */
	protected void sequence_Header(ISerializationContext context, Header semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Image returns Image
	 *
	 * Constraint:
	 *     {Image}
	 * </pre>
	 */
	protected void sequence_Image(ISerializationContext context, Image semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Section returns Ingredients
	 *     Ingredients returns Ingredients
	 *
	 * Constraint:
	 *     (orderNumber=EInt unittoggle=UnitOfMeasure?)
	 * </pre>
	 */
	protected void sequence_Ingredients(ISerializationContext context, Ingredients semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Section returns Instructions
	 *     Instructions returns Instructions
	 *
	 * Constraint:
	 *     orderNumber=EInt
	 * </pre>
	 */
	protected void sequence_Instructions(ISerializationContext context, Instructions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RecipePackage.Literals.SECTION__ORDER_NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RecipePackage.Literals.SECTION__ORDER_NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInstructionsAccess().getOrderNumberEIntParserRuleCall_3_0(), semanticObject.getOrderNumber());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Macronutrients returns Macronutrients
	 *
	 * Constraint:
	 *     {Macronutrients}
	 * </pre>
	 */
	protected void sequence_Macronutrients(ISerializationContext context, Macronutrients semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Section returns Nutrients
	 *     Nutrients returns Nutrients
	 *
	 * Constraint:
	 *     (orderNumber=EInt percentagetoggle=PercentageAmountToggle? vitamins=Vitamins? macronutrients=Macronutrients?)
	 * </pre>
	 */
	protected void sequence_Nutrients(ISerializationContext context, Nutrients semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Page returns Page
	 *
	 * Constraint:
	 *     (name=EString instructions=[Instructions|EString] ingredients=[Ingredients|EString] (section+=Section section+=Section*)? header=Header)
	 * </pre>
	 */
	protected void sequence_Page(ISerializationContext context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PercentageAmountToggle returns PercentageAmountToggle
	 *
	 * Constraint:
	 *     {PercentageAmountToggle}
	 * </pre>
	 */
	protected void sequence_PercentageAmountToggle(ISerializationContext context, PercentageAmountToggle semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Title returns Title
	 *
	 * Constraint:
	 *     {Title}
	 * </pre>
	 */
	protected void sequence_Title(ISerializationContext context, Title semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UnitOfMeasure returns UnitOfMeasure
	 *
	 * Constraint:
	 *     {UnitOfMeasure}
	 * </pre>
	 */
	protected void sequence_UnitOfMeasure(ISerializationContext context, UnitOfMeasure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Vitamins returns Vitamins
	 *
	 * Constraint:
	 *     (Vitamin+=Vitamin Vitamin+=Vitamin*)
	 * </pre>
	 */
	protected void sequence_Vitamins(ISerializationContext context, Vitamins semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
