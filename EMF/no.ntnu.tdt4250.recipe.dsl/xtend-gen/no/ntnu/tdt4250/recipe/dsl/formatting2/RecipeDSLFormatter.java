/**
 * generated by Xtext 2.36.0
 */
package no.ntnu.tdt4250.recipe.dsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import no.ntnu.tdt4250.recipe.Header;
import no.ntnu.tdt4250.recipe.Ingredients;
import no.ntnu.tdt4250.recipe.Instructions;
import no.ntnu.tdt4250.recipe.Nutrients;
import no.ntnu.tdt4250.recipe.Page;
import no.ntnu.tdt4250.recipe.UnitOfMeasureToggle;
import no.ntnu.tdt4250.recipe.dsl.services.RecipeDSLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;

@SuppressWarnings("all")
public class RecipeDSLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RecipeDSLGrammarAccess _recipeDSLGrammarAccess;

  protected void _format(final Page page, @Extension final IFormattableDocument document) {
    document.<Instructions>format(page.getInstructions());
    document.<Ingredients>format(page.getIngredients());
    document.<Header>format(page.getHeader());
    document.<Nutrients>format(page.getNutrients());
  }

  protected void _format(final Ingredients ingredients, @Extension final IFormattableDocument document) {
    document.<UnitOfMeasureToggle>format(ingredients.getUnittoggle());
  }

  @XbaseGenerated
  public void format(final Object ingredients, final IFormattableDocument document) {
    if (ingredients instanceof XtextResource) {
      _format((XtextResource)ingredients, document);
      return;
    } else if (ingredients instanceof Ingredients) {
      _format((Ingredients)ingredients, document);
      return;
    } else if (ingredients instanceof Page) {
      _format((Page)ingredients, document);
      return;
    } else if (ingredients instanceof EObject) {
      _format((EObject)ingredients, document);
      return;
    } else if (ingredients == null) {
      _format((Void)null, document);
      return;
    } else if (ingredients != null) {
      _format(ingredients, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ingredients, document).toString());
    }
  }
}
