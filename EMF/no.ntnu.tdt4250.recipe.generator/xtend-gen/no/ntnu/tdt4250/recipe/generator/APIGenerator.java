package no.ntnu.tdt4250.recipe.generator;

import no.ntnu.tdt4250.recipe.Nutrients;
import no.ntnu.tdt4250.recipe.Page;
import no.ntnu.tdt4250.recipe.Vitamin;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class APIGenerator {
  public CharSequence generateKotlinFile(final Page page) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import kotlinx.coroutines.runBlocking");
    _builder.newLine();
    _builder.append("import kotlinx.serialization.*");
    _builder.newLine();
    _builder.append("import kotlinx.serialization.json.*");
    _builder.newLine();
    _builder.append("import okhttp3.*");
    _builder.newLine();
    _builder.append("import java.io.IOException");
    _builder.newLine();
    _builder.append("import com.example.recipeexplorer.querying.Recipe");
    _builder.newLine();
    _builder.append("import kotlinx.coroutines.Dispatchers");
    _builder.newLine();
    _builder.append("import kotlinx.coroutines.withContext");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Ensure you have the following dependencies in your build.gradle:");
    _builder.newLine();
    _builder.append("// implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.2\")");
    _builder.newLine();
    _builder.append("// implementation(\"com.squareup.okhttp3:okhttp:4.9.1\")");
    _builder.newLine();
    _builder.append("// implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1\")");
    _builder.newLine();
    _builder.append("// implementation (\"org.jetbrains.kotlin:kotlin-reflect:1.9.23\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Serializable");
    _builder.newLine();
    _builder.append("data class ExtendedIngredient(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val id: Int,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val name: String,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val amountMetric: Double,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val unitMetric: String,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val amountUS: Double,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val unitUS: String");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Serializable");
    _builder.newLine();
    _builder.append("data class RecipeResult(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val id: Int,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val title: String,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val image: String");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Serializable");
    _builder.newLine();
    _builder.append("data class RecipeInformation(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val id: Int,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val title: String,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val image: String,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val servings: Int,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val instructions: String?,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val readyInMinutes: Int,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val dishTypes: List<String>,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val extendedIngredients: List<ExtendedIngredient>,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val nutrients: List<Nutrient>");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Serializable");
    _builder.newLine();
    _builder.append("data class Nutrient(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val name: String,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val amount: Double,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val unit: String,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val percentOfDailyNeeds: Double");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Simulated database");
    _builder.newLine();
    _builder.append("val recipeDatabase = mutableMapOf<Int, RecipeData>()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("data class RecipeData(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val id: Int,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val title: String,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val ingredients: List<ExtendedIngredient>,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val instructions: String?,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val nutrients: Map<String, Double>,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val image: String,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val servings: Int");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("val client = OkHttpClient()");
    _builder.newLine();
    _builder.append("val json = Json { ignoreUnknownKeys = true }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Replace with your actual API key");
    _builder.newLine();
    _builder.append("//3e4cbd540c674e369b64deff2fcb5d3c");
    _builder.newLine();
    _builder.append("val apiKey = \"8b95563fe6c84ce990610ca3e673a9ea\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("suspend fun getRecipeIDs(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("maxReadyTime: Int?,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("calories: Int?,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("dietType: String?,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("servings: Int?,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("sortingType: String?,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("number: Int = 2");
    _builder.newLine();
    _builder.append("): List<Int> = withContext(Dispatchers.IO) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val urlBuilder = HttpUrl.Builder()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".scheme(\"https\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".host(\"api.spoonacular.com\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".addPathSegments(\"recipes/complexSearch\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".addQueryParameter(\"apiKey\", apiKey)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".addQueryParameter(\"number\", number.toString())");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (maxReadyTime != null) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("urlBuilder.addQueryParameter(\"maxReadyTime\", maxReadyTime.toString())");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (calories != null) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("urlBuilder.addQueryParameter(\"maxCalories\", calories.toString())");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (dietType != null) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("urlBuilder.addQueryParameter(\"diet\", dietType)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (servings != null) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("urlBuilder.addQueryParameter(\"servings\", servings.toString())");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (sortingType != null) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("urlBuilder.addQueryParameter(\"sort\", sortingType)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val url = urlBuilder.build().toString()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val request = Request.Builder()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".url(url)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".build()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.newCall(request).execute().use { response ->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!response.isSuccessful) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw IOException(\"Unexpected code $response\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("val responseBody = response.body?.string()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (responseBody != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("val results = json.decodeFromString<JsonObject>(responseBody)[\"results\"]?.jsonArray");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("results?.map { it.jsonObject[\"id\"]!!.jsonPrimitive.int } ?: emptyList()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("emptyList()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("suspend fun getRecipeInformation(recipeId: Int): RecipeInformation? {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val url = HttpUrl.Builder()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".scheme(\"https\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".host(\"api.spoonacular.com\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".addPathSegments(\"recipes/$recipeId/information\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".addQueryParameter(\"apiKey\", apiKey)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".addQueryParameter(\"includeNutrition\", \"true\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".build()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".toString()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val request = Request.Builder()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".url(url)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".build()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.newCall(request).execute().use { response ->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!response.isSuccessful) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("println(\"Failed to get recipe information for recipe ID: $recipeId\")");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("val responseBody = response.body?.string()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (responseBody != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("val jsonObject = json.decodeFromString<JsonObject>(responseBody)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("val extendedIngredients = jsonObject[\"extendedIngredients\"]?.jsonArray?.map {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("val ingredient = it.jsonObject");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ExtendedIngredient(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("id = ingredient[\"id\"]!!.jsonPrimitive.int,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("name = ingredient[\"name\"]!!.jsonPrimitive.content,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("amountMetric = ingredient[\"measures\"]!!.jsonObject[\"metric\"]!!.jsonObject[\"amount\"]!!.jsonPrimitive.double,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("unitMetric = ingredient[\"measures\"]!!.jsonObject[\"metric\"]!!.jsonObject[\"unitLong\"]!!.jsonPrimitive.content,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("amountUS = ingredient[\"measures\"]!!.jsonObject[\"us\"]!!.jsonObject[\"amount\"]!!.jsonPrimitive.double,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("unitUS = ingredient[\"measures\"]!!.jsonObject[\"us\"]!!.jsonObject[\"unitLong\"]!!.jsonPrimitive.content");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} ?: emptyList()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("val nutrients = jsonObject[\"nutrition\"]?.jsonObject?.get(\"nutrients\")?.jsonArray?.map {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("val nutrient = it.jsonObject");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Nutrient(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("name = nutrient[\"name\"]!!.jsonPrimitive.content,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("amount = nutrient[\"amount\"]!!.jsonPrimitive.double,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("unit = nutrient[\"unit\"]!!.jsonPrimitive.content,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("percentOfDailyNeeds = nutrient[\"percentOfDailyNeeds\"]!!.jsonPrimitive.double");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} ?: emptyList()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("val readyInMinutes = jsonObject[\"readyInMinutes\"]!!.jsonPrimitive.int");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("val dishTypes = jsonObject[\"dishTypes\"]?.jsonArray?.map { it.jsonPrimitive.content } ?: emptyList()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return RecipeInformation(");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("id = jsonObject[\"id\"]!!.jsonPrimitive.int,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("title = jsonObject[\"title\"]!!.jsonPrimitive.content,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("image = jsonObject[\"image\"]!!.jsonPrimitive.content,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("servings = jsonObject[\"servings\"]!!.jsonPrimitive.int,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("instructions = jsonObject[\"instructions\"]?.jsonPrimitive?.content,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("readyInMinutes = readyInMinutes,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("dishTypes = dishTypes,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("extendedIngredients = extendedIngredients,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("nutrients = nutrients");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("fun extractRecipeData(recipeInfo: RecipeInformation): RecipeData {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val nutrientsMap = recipeInfo.nutrients.associate { it.name to it.amount }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val recipeData = RecipeData(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("id = recipeInfo.id,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title = recipeInfo.title,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ingredients = recipeInfo.extendedIngredients,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("instructions = recipeInfo.instructions,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("nutrients = nutrientsMap,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("image = recipeInfo.image,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("servings = recipeInfo.servings");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Store in simulated database");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("recipeDatabase[recipeInfo.id] = recipeData");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return recipeData");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("fun get(recipeId: Int, propertyName: String, isMetric: Boolean = true): String {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val recipeData = recipeDatabase[recipeId]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return if (recipeData != null) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("when (propertyName.lowercase()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"ingredients\" -> recipeData.ingredients.joinToString(separator = \"\\n\") { ingredient ->");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (isMetric) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\"${ingredient.amountMetric} ${ingredient.unitMetric} ${ingredient.name}\"");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\"${ingredient.amountUS} ${ingredient.unitUS} ${ingredient.name}\"");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("else -> recipeData.nutrients[propertyName]?.toString()");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("?: \"Property \'$propertyName\' is null for recipe ID $recipeId.\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\"Recipe ID $recipeId not found in the database.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("suspend fun getNewRecipeId(idList: List<Int>): Int {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var newRecipeId: Int? = null");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while (newRecipeId == null) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("val randomRecipeIds = getRecipeIDs(null, null, null, null, null)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("newRecipeId = randomRecipeIds.find { it !in idList }");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (newRecipeId != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("val recipeInfo = getRecipeInformation(newRecipeId)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (recipeInfo != null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("extractRecipeData(recipeInfo)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("newRecipeId = null");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return newRecipeId");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("fun convertToRecipe(recipeInfo: RecipeInformation): Recipe {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val id = recipeInfo.id");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val type = if (recipeInfo.dishTypes.isNotEmpty()) recipeInfo.dishTypes.first() else \"Unknown\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val title = recipeInfo.title");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val image = recipeInfo.image");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val ingredientsMetric = recipeInfo.extendedIngredients.map {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\"${it.amountMetric} ${it.unitMetric} ${it.name}\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val ingredientsImperial = recipeInfo.extendedIngredients.map {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\"${it.amountUS} ${it.unitUS} ${it.name}\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val instructions = recipeInfo.instructions ?: \"No instructions provided.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val portions = recipeInfo.servings");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val preparationTime = recipeInfo.readyInMinutes");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val calories = recipeInfo.nutrients.find { it.name.equals(\"Calories\", ignoreCase = true) }?.amount?.toInt() ?: 0");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val macroNutrientsNames = listOf(\"Protein\", \"Fat\", \"Carbohydrates\")");
    _builder.newLine();
    _builder.append("\t");
    final Nutrients nutrients = page.getNutrients();
    _builder.newLineIfNotEmpty();
    {
      if ((((nutrients != null) && (nutrients.getVitamins() != null)) && (!nutrients.getVitamins().getVitamin().isEmpty()))) {
        _builder.append("    ");
        _builder.append("val vitaminsNames = listOf(");
        _builder.newLine();
        {
          EList<Vitamin> _vitamin = nutrients.getVitamins().getVitamin();
          boolean _hasElements = false;
          for(final Vitamin vitamin : _vitamin) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "\t            ");
            }
            _builder.append("\t            ");
            _builder.append("\"");
            String _translateVitaminName = this.translateVitaminName(vitamin.toString());
            _builder.append(_translateVitaminName, "\t            ");
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("    ");
        _builder.append(")");
        _builder.newLine();
      } else {
        _builder.append("    ");
        _builder.append("val vitaminsNames = emptyList<String>()");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val macroNutrientsAmount = recipeInfo.nutrients.filter { it.name in macroNutrientsNames }");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".map { \"${it.amount}${it.unit} ${it.name}\" }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val vitaminsAmount = if (vitaminsNames.isEmpty()) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("emptyList()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("recipeInfo.nutrients.filter { it.name in vitaminsNames }");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(".map { \"${it.amount}${it.unit} ${it.name}\" }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val macroNutrientsPercentage = recipeInfo.nutrients.filter { it.name in macroNutrientsNames }");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(".map { \"${it.percentOfDailyNeeds}% ${it.name}\" }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val vitaminsPercentage = if (vitaminsNames.isEmpty()) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("emptyList()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("recipeInfo.nutrients.filter { it.name in vitaminsNames }");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(".map { \"${it.percentOfDailyNeeds}% ${it.name}\" }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return Recipe(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("id = id,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type = type,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("title = title,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("image = image,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ingredientsMetric = ingredientsMetric,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ingredientsImperial = ingredientsImperial,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("instructions = instructions,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("portions = portions,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("preparationTime = preparationTime,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("calories = calories,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("macroNutrientsAmount = macroNutrientsAmount,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("vitaminsAmount = vitaminsAmount,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("macroNutrientsPercentage = macroNutrientsPercentage,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("vitaminsPercentage = vitaminsPercentage");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("suspend fun fetchRecipes(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("maxReadyTime: Int?,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("calories: Int?,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("dietType: String?,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("servings: Int?,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("sortingType: String?,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("nr: Int");
    _builder.newLine();
    _builder.append("): List<Recipe> {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val recipeIds = getRecipeIDs(maxReadyTime, calories, dietType, servings, sortingType, nr)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val recipes = mutableListOf<Recipe>()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for (id in recipeIds) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("val recipeInfo = getRecipeInformation(id)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (recipeInfo != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("val recipe = convertToRecipe(recipeInfo)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("recipes.add(recipe)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return recipes");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("fun mainPLSSS() = runBlocking {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val maxReadyTime = 30");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val calories = 500");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val dietType = \"vegetarian\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val servings = 4");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val sortingType = \"popularity\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("val nr = 5 // Number of recipes to fetch");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Fetch recipes");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("val fetchedRecipes: MutableList<Recipe> = fetchRecipes(");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("maxReadyTime,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("calories,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("dietType,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("servings,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sortingType,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nr");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(").toMutableList()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}catch (e: Exception) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("println(\"An error occurred: ${e.message}\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public String translateVitaminName(final String enumValue) {
    String _switchResult = null;
    if (enumValue != null) {
      switch (enumValue) {
        case "VITAMIN_A":
          _switchResult = "Vitamin A";
          break;
        case "VITAMIN_B1":
          _switchResult = "Vitamin B1";
          break;
        case "VITAMIN_B2":
          _switchResult = "Vitamin B2";
          break;
        case "VITAMIN_B3":
          _switchResult = "Vitamin B3";
          break;
        case "VITAMIN_B4":
          _switchResult = "Vitamin B4";
          break;
        case "VITAMIN_B5":
          _switchResult = "Vitamin B5";
          break;
        case "VITAMIN_B6":
          _switchResult = "Vitamin B6";
          break;
        case "VITAMIN_B12":
          _switchResult = "Vitamin B12";
          break;
        case "VITAMIN_C":
          _switchResult = "Vitamin C";
          break;
        case "VITAMIN_E":
          _switchResult = "Vitamin E";
          break;
        case "VITAMIN_K":
          _switchResult = "Vitamin K";
          break;
        default:
          _switchResult = enumValue;
          break;
      }
    } else {
      _switchResult = enumValue;
    }
    return _switchResult;
  }
}
